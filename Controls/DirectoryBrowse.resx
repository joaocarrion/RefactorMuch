<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="updateProgress.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>154, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAM
        EgAAAk1TRnQBSQFMAgEBAgEAAQgBAAEIAQABGAEAARgBAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFg
        AwABGAMAAQEBAAEYBgABGzAAA/ED8gYAA/cD7gPwA/IeAAHhAeIB4AHGAcgBwgG+AcABtgG8Ab8BtAG7
        Ab4BtAG7Ab4BtAG7Ab4BtAG7Ab4BtAG7Ab4BtAG7Ab4BtAG7Ab4BtAG7Ab4BtAG7Ab4BtAG7Ab4BtAG7
        Ab4BtAG5AbwBsgGrAa4BpgKTAZIBywHMAcsD7qUAA/cG9AbsAwAD9wPtA+ID7gPwFQAD9gPxA+4BwAHC
        AbwBngGiAZABnAGhAYQBfAGCAWoBawFxAVsBaQFwAVoBaQFwAVoBaQFwAVoBaQFwAVoBaQFwAVoBaQFw
        AVoBaQFwAVoBaQFwAVoBaQFvAVoBaAFuAVkBeQGAAWYBYAFlAVIBHQEeARsBngGfAZ4D6KUAA/AD9QP3
        BugDAAHsAu4B4ALiA8UD4QPuFQAD6APYA8MBrAGuAaIBrwG0AZkBzgHVAaoBdQF7AWEBRgFMAToBQgFH
        ATcBQgFHATcBQgFHATcBQgFHATcBQgFHATcBQgFHATcBQgFHATcBQgFHATcBQAFFATYBPQFCATMBegGD
        AWUBbQF0AVkBEwEUARABmgGbAZkD56UAAecC8AHPAfUB9gGvAfQB9wHTAeoB6wPqAwAB6wLuAdMB6QHq
        AaQB3AHeAbsB1wHYAdUB3gHfA+4D8APyDAABzAHNAcgBnwGjAZUBmAGeAYoBkQGXAX8BpQGsAYsB0wHc
        Aa8BigGSAXIBZAFrAVMBYQFoAVABYQFoAVABYQFoAVABYQFoAVABYQFoAVABYQFoAVABYQFoAVABYQFo
        AVABXwFmAU8BXQFjAU0BiwGVAXQBcwF7AV8BEwEUARABmgGbAZkD55wAA/cG9AHTAfAB8wG4AfUB9wGw
        AfUB+AHbAewB7QPvAwAB8ALxAdsB7QHuAbMB7AHuAaoB2gHcAbYB0gHTA9QD6QPwDAABxwHIAb8BiwGQ
        AXkBdwGAAWMBeAF/AWMBlQGcAXsB0AHYAawBhAGLAW0BWwFhAUwBVwFeAUkBVwFeAUkBVwFeAUkBVwFe
        AUkBVwFeAUkBVwFeAUkBVwFeAUkBVwFeAUkBVgFcAUgBVAFZAUYBhgGPAW8BcAF4AV0BEwEUARABmgGb
        AZkD55wAA/AD9QP3Aa8B9AH3AbAB9QH4A/oD9QkAA/QB8QL2Aa8B6QHrAZMBzAHOA58D1APuDAAC1wHM
        AZsBnwGGAWABaAFPAV8BZAFOAYABhQFqAcUBywGiAWEBZQFQASwBLwElAScBKgEhAScBKgEhAScBKgEh
        AScBKgEhAScBKgEhAScBKgEhAScBKgEhAScBKgEhASUBKAEgASIBJAEdAWoBcQFXAWUBbAFTARMBFAEQ
        AZoBmwGZA+ecAAHnAvABzwH1AfYBrwH0AfcBuAH0AfYB0AH1BPYD9AkAA/sD9AHTAe4B7wGuAeMB5QGT
        AcwBzgG1AdIB0wHVAd4B3wPuA/AD8gMAAcsBzQHAAZkBnwGBAYsBlQFyAXwBhAFnAZMBmgF7AdAB2AGt
        AYQBigFtAVsBYgFMAVgBXgFIAVgBXgFIAVgBXgFIAVgBXgFIAVgBXgFIAVgBXgFIAVgBXgFIAVgBXgFI
        AVYBXAFHAVMBWQFGAYUBjwFvAXABeAFdARMBFAEQAZoBmwGZA+eTAAP3BvQB0wHwAfMBuAH1AfcBsAH1
        AfgB1QHwAfMB5wXwA/cPAAHsAfIB8wHTAe4B7wGvAekB6wGpAdkB2gG2AdIB0wPUA+kD8AMAAcQBxwG5
        AZkBoAF/AawBuAGOAZMBnAF5AaQBrQGIAeAB6gG6AbUBvgGWAZ4BpwGCAZwBpQGBAZwBpQGBAZwBpQGB
        AZwBpQGBAZwBpQGBAZwBpQGBAZwBpQGBAZwBpQGBAZsBpAGAAZkBogF/Aa0BuAGQAYABiQFrARMBFAEQ
        AZoBmwGZA+eTAAPwA/UD9wGvAfQB9wGwAfUB+AP6A/UbAAP0AfEC9gGvAekB6wGTAcwBzgOfA9QD7gMA
        AcABwQG2AZoBogGAAcMB0QGhAaIBrQGGAbMBvAGTAfQB/wHKAfMB/gHJAfIB/gHIAfMB/gHJAfMB/gHJ
        AfMB/gHJAfMB/gHJAfMB/gHJAfMB/gHJAfMB/gHJAfMB/gHJAfMB/gHJAfMB/gHJAd8B6wG6AZUBngF8
        ARMBFAEPAZoBmwGZA+eTAAHnAvABzwH1AfYBrwH0AfYBuAH0AfYB0AH1BPYD9BsAA/sD9AHTAe4B7wGu
        AeMB5QGTAcwBzgG1AdIB0wHcAuMDAAHBAcQBuAGWAZ4BfAGrAbgBjQGTAZwBeQGlAawBiAHhAeoBuQG2
        Ab0BlgGfAaYBgwGdAaQBggGdAaQBggGdAaQBggGdAaQBggGdAaQBggGdAaQBggGdAaQBggGdAaQBggGc
        AaMBgQGbAaIBgAGuAbgBkAGBAYkBawETARQBEAGaAZsBmQPnkwAB2AHwAfIBrgHrAe4BkwHYAdoBxgHr
        AewB5gLyA/AD9yEAAecC8AHOAfAB8gGtAecB6QGpAdkB2wHOAeEB4gMAAcQBxwG5AZgBoAF9AagBtAGK
        AZIBmgF4AaABpgGEAdIB2QGtAYcBjQFwAV8BZAFPAVsBYAFMAVsBYAFMAVsBYAFMAVsBYAFMAVsBYAFM
        AVsBYAFMAVsBYAFMAVsBYAFMAVoBXwFLAVgBXAFIAYgBkQFwAXEBeQFeARMBFAEQAZoBmwGZA+eTAAHB
        Ae8B8AGTAdgB2wOkA9gD8CcAA/AB8QLzAesB8QHyAa8B6QHsAcQB6gHsAwABxQHIAboBnwGnAYQBugHG
        AZkBnwGnAYMBpAGqAYcBxwHOAaUBZwFsAVUBNAE4ASoBLwEzAScBLwEzAScBLwEzAScBLwEzAScBLwEz
        AScBLwEzAScBLwEzAScBLwEzAScBLQExASYBKgEuASMBbgF2AVsBZgFuAVUBEwEUARABmgGbAZkD55MA
        AdUC8AGsAeUB5wGWAckBywG5AdEB0gHaAuAD8APxA/IeAAHnAvABzgH0AfUBqwHyAfUBtwHxAfMB2AHu
        AfADAAHEAccBuQGYAaABfgGpAbQBiwGSAZoBeAGfAaYBhAHRAdkBrgGGAYwBbwFeAWMBTQFaAV8BSgFa
        AV8BSgFaAV8BSgFaAV8BSgFaAV8BSgFaAV8BSgFaAV8BSgFaAV8BSgFZAV4BSQFXAVsBSAGHAY8BcAFx
        AXkBXgETARQBEAGaAZsBmQPnkwAB6gLyAc8C7AGnAeIB5QGpAdUB1gG6AtID2APrA/AVAAP3A/QD9QHU
        AfEB8wG4AfQB9gGvAfQB9wHTAfEB8wHsAfIB8wMAAcQBxwG5AY8BlgF2AYwBlgFzAX0BhAFoAZQBmgF7
        AdEB2QGuAYYBjQFwAV8BZAFOAVwBYAFLAVwBYAFLAVwBYAFLAVwBYAFLAVwBYAFLAVwBYAFLAVwBYAFL
        AVwBYAFLAVoBXwFKAVgBXAFJAYgBkAFxAXIBeQFeARMBFAEQAZoBmwGZA+eWAAHxAvQB1wHxAfIBpwHi
        AeUBlgHJAcsDpAPYA/AVAAPwA/YD+gGwAfUB+AGvAfQE9wP0BgABxQHIAboBhAGJAWwBZQFsAVIBYQFm
        AVEBgQGHAW0BxgHOAaYBaQFuAVcBOAE8AS0BMwE3ASoBMwE3ASoBMwE3ASoBMwE3ASoBMwE3ASoBMwE3
        ASoBMwE3ASoBMwE3ASoBMQE1ASkBLgEyASYBcAF4AVwBaAFvAVUBEwEUARABmgGbAZkD55YAAfoC+wHx
        AvQBzwHrAe0BrQHgAeIBlgHJAcsBuQHRAdIB2gLgA/AD8QPyDAAB5wLwAdAB9QH2AbAB9QH4AbcB9QH3
        Ac8B9QH2A/UD9AYAAcQBxwG5AY8BlgF2AYwBlgFzAX4BgwFoAZQBmQF6Ac8B1wGrAYEBhwFqAVcBXAFI
        AVIBVgFEAWsBcgFZAW4BdQFbAVwBYQFMAV0BYgFNAV0BYgFNAV0BYgFNAV0BYgFNAVwBYAFMAVkBXQFJ
        AYkBkQFxAXIBeQFeARMBFAEQAZoBmwGZA+ecAAHqAvIBzwLsAacB4gHlAakB1QHWAboC0gPYA+sD8AYA
        A/oD9QHUAfEB8wG4AfQB9gGvAfQB9wHTAfEB8wHnBfAD9wYAAcMBxAG4AZYBnQF8AagBtAGLAZMBmQF5
        AZ4BowGCAcsB0gGoAXUBegFhAUcBSwE6AUEBRAE2AYcBjgFwAaUBrgGIAZwBowGAAZwBpAGBAZwBpAGB
        AZwBpAGBAZwBpAGBAZwBowGAAZoBoQF/Aa0BuAGPAYEBiQFqARMBFAEQAZoBmwGZA+efAAHxAvQB1wHx
        AfIBpwHiAeUBlgHJAcsDpAPYA/AGAAP1A/oBsAH1AfgBrwH0BPcD9A8AAcABwQG2AZgBnwF+AbkBxgGZ
        AaABqAGEAaEBpgGFAbwBwQGbAUYBSQE6AQcBCQEGAwABhgGMAW8B1wHhAbEB8AH9AcYB8AH9AcYB8AH9
        AcYB8AH9AcYB8AH9AcYB8AH9AcYB8AH9AcYB3QHrAbcBlAGeAXsBEwEUAQ8BmgGbAZkD558AAfoC+wHx
        AvQBzwHrAe0BrQHgAeIBlgHJAssB3AHdA+oDAAHwAvEB2gHvAfABsAH1AfcBtwH1AfcBzwH1AfYD9QP0
        DwABwwHEAbgBjwGVAXYBkwGeAXkBhQGMAW0BmAGdAX4BzQHSAaoBdwF8AWIBSAFOATsBQwFIATcBhwGP
        AXABpQGuAYgBmgGjAX8BmwGkAYABmwGkAYABmwGkAYABmwGkAX8BmgGjAX8BmAGhAX4BrgG4AZABgQGK
        AWsBEwEUARABmgGbAZkD56UAAeoC8gHPAuwBpwHiAeUB0wHmAecD6wMAAesC7wHWAvMBsQH2AfgB1AHx
        AfMB5wXwA/cPAAHEAccBuQGGAYwBbwFzAXwCXgFkAU0BbgFxAVoBoQGmAYUBcgF4AV4BWQFgAUkBWAFe
        AUgBbgF2AVsBcQF4AV0BXgFlAU4BXwFmAU8BXwFmAU8BXwFmAU8BXQFkAU0BXQFjAUwBXQFjAU0BdwF+
        AWIBXAFiAUwBDgEPAQwBmgGbAZoD6KgAAfEC9AHXAfEB8gHuAfYB9wPyAwAB6gLuAe0C9AP8A/UYAAHF
        AccBugF/AYQBaQFZAWABSQEtATABJAEiASMBGwE5ATwBLgE5AT0BLwE6AT4BMAE9AUEBMwE8AUABMgE8
        AUABMQE9AUEBMgE9AUEBMgE9AUEBMgE9AUEBMgE4ATwBLwE4ATwBLwE9AUEBMgE5ATwBLwEmASgBHwIF
        AQQDmwPqqAAB+gL7AfEC9AHzAvQD9wMAAfYC9wHzAvQD9QP6GAABvwHBAbUBhQGMAW4BhQGPAW4BaAFw
        AVYBXwFmAU8BagFxAVcBcgF5AV4BbwF3AVsBYgFqAVIBYgFpAVEBYgFpAVEBYgFqAVEBYgFpAVEBYQFo
        AVABYAFnAU8BawFyAVgBdwF9AWoBhgGIAYMBoQGiAZ4CqgGnA58D3wP22wABqgGrAaQBXQFjAU0BcAF4
        AVwBXQFlAU0BVQFbAUcBVwFdAUgBXgFkAU4BWwFiAUsBTgFUAUABTgFUAUABTgFUAUABTgFUAUABVwFd
        AUgBYwFoAVQBcAF2AWMBfQGDAW0BmQGdAY8DxgPgBuwD9t4AA4UCCQEHARoBHAEVAQ0BDwELAgUBBBUA
        AR0BHwEaAUIBQwE+A20DbgOeA/wD9QPvmQABQgFNAT4HAAE+AwABKAMAAWADAAEYAwABAQEAAQEFAAEg
        AQEWAAP/AQAB/wHMAT8B8AgAAf4BCAE/AYAIAAH+AQgBPwGACAAB/gEIAQcBgAgAAfABCAEHAYAIAAHw
        ARwBBwGACAAB8AEcAQABgAgAAYABHwEAAYAIAAGAAf8CgAgAAYAB/wKACAABgAH/AeABgAgAAYMB/wHg
        AYAIAAGAAX8B4AGACAABgAF/AQABgAgAAcABfwEBAYAIAAHAAQ8BAQGACAAB8AEMAQEBgAgAAfgBDAEP
        AYAIAAH4AQgBDwGACAAB/gEIAQ8BgAgAAf8BCAF/AYAIAAH/AQgBfwGACAAD/wGAAQABAQYAA/8BgAEA
        AQcGAAs=
</value>
  </data>
</root>